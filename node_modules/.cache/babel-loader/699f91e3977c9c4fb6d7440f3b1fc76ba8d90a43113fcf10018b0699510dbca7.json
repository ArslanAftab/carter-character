{"ast":null,"code":"'use client';\n\nimport { randomId } from '@mantine/hooks';\nimport { createStore, useStore } from '@mantine/store';\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nconst createNotificationsStore = () => createStore({\n  notifications: [],\n  queue: [],\n  limit: 5\n});\nconst notificationsStore = createNotificationsStore();\nconst useNotifications = (store = notificationsStore) => useStore(store);\nfunction updateNotificationsState(store, update) {\n  const state = store.getState();\n  const notifications2 = update([...state.notifications, ...state.queue]);\n  store.setState({\n    notifications: notifications2.slice(0, state.limit),\n    queue: notifications2.slice(state.limit),\n    limit: state.limit\n  });\n}\nfunction showNotification(notification, store = notificationsStore) {\n  const id = notification.id || randomId();\n  updateNotificationsState(store, notifications2 => {\n    if (notification.id && notifications2.some(n => n.id === notification.id)) {\n      return notifications2;\n    }\n    return [...notifications2, __spreadProps(__spreadValues({}, notification), {\n      id\n    })];\n  });\n  return id;\n}\nfunction hideNotification(id, store = notificationsStore) {\n  updateNotificationsState(store, notifications2 => notifications2.filter(notification => {\n    var _a;\n    if (notification.id === id) {\n      (_a = notification.onClose) == null ? void 0 : _a.call(notification, notification);\n      return false;\n    }\n    return true;\n  }));\n  return id;\n}\nfunction updateNotification(notification, store = notificationsStore) {\n  updateNotificationsState(store, notifications2 => notifications2.map(item => {\n    if (item.id === notification.id) {\n      return __spreadValues(__spreadValues({}, item), notification);\n    }\n    return item;\n  }));\n  return notification.id;\n}\nfunction cleanNotifications(store = notificationsStore) {\n  updateNotificationsState(store, () => []);\n}\nfunction cleanNotificationsQueue(store = notificationsStore) {\n  updateNotificationsState(store, notifications2 => notifications2.slice(0, store.getState().limit));\n}\nconst notifications = {\n  show: showNotification,\n  hide: hideNotification,\n  update: updateNotification,\n  clean: cleanNotifications,\n  cleanQueue: cleanNotificationsQueue,\n  updateState: updateNotificationsState\n};\nexport { cleanNotifications, cleanNotificationsQueue, createNotificationsStore, hideNotification, notifications, notificationsStore, showNotification, updateNotification, updateNotificationsState, useNotifications };","map":{"version":3,"names":["__defProp","Object","defineProperty","__defProps","defineProperties","__getOwnPropDescs","getOwnPropertyDescriptors","__getOwnPropSymbols","getOwnPropertySymbols","__hasOwnProp","prototype","hasOwnProperty","__propIsEnum","propertyIsEnumerable","__defNormalProp","obj","key","value","enumerable","configurable","writable","__spreadValues","a","b","prop","call","__spreadProps","createNotificationsStore","createStore","notifications","queue","limit","notificationsStore","useNotifications","store","useStore","updateNotificationsState","update","state","getState","notifications2","setState","slice","showNotification","notification","id","randomId","some","n","hideNotification","filter","_a","onClose","updateNotification","map","item","cleanNotifications","cleanNotificationsQueue","show","hide","clean","cleanQueue","updateState"],"sources":["/Users/arslan/dev/carter-character/carter-character/node_modules/@mantine/notifications/src/notifications.store.ts"],"sourcesContent":["import { NotificationProps } from '@mantine/core';\nimport { randomId } from '@mantine/hooks';\nimport { createStore, useStore, MantineStore } from '@mantine/store';\n\nexport interface NotificationData extends Omit<NotificationProps, 'onClose'> {\n  /** Notification id, can be used to close or update notification */\n  id?: string;\n\n  /** Notification message, required for all notifications */\n  message: React.ReactNode;\n\n  /** Determines whether notification should be closed automatically,\n   *  number is auto close timeout in ms, overrides `autoClose` from `Notifications`\n   * */\n  autoClose?: boolean | number;\n\n  /** Called when notification closes */\n  onClose?(props: NotificationData): void;\n\n  /** Called when notification opens */\n  onOpen?(props: NotificationData): void;\n}\n\nexport interface NotificationsState {\n  notifications: NotificationData[];\n  queue: NotificationData[];\n  limit: number;\n}\n\nexport type NotificationsStore = MantineStore<NotificationsState>;\n\nexport const createNotificationsStore = () =>\n  createStore<NotificationsState>({\n    notifications: [],\n    queue: [],\n    limit: 5,\n  });\n\nexport const notificationsStore = createNotificationsStore();\nexport const useNotifications = (store: NotificationsStore = notificationsStore) => useStore(store);\n\nexport function updateNotificationsState(\n  store: NotificationsStore,\n  update: (notifications: NotificationData[]) => NotificationData[]\n) {\n  const state = store.getState();\n  const notifications = update([...state.notifications, ...state.queue]);\n\n  store.setState({\n    notifications: notifications.slice(0, state.limit),\n    queue: notifications.slice(state.limit),\n    limit: state.limit,\n  });\n}\n\nexport function showNotification(\n  notification: NotificationData,\n  store: NotificationsStore = notificationsStore\n) {\n  const id = notification.id || randomId();\n\n  updateNotificationsState(store, (notifications) => {\n    if (notification.id && notifications.some((n) => n.id === notification.id)) {\n      return notifications;\n    }\n\n    return [...notifications, { ...notification, id }];\n  });\n\n  return id;\n}\n\nexport function hideNotification(id: string, store: NotificationsStore = notificationsStore) {\n  updateNotificationsState(store, (notifications) =>\n    notifications.filter((notification) => {\n      if (notification.id === id) {\n        notification.onClose?.(notification);\n        return false;\n      }\n\n      return true;\n    })\n  );\n\n  return id;\n}\n\nexport function updateNotification(\n  notification: NotificationData,\n  store: NotificationsStore = notificationsStore\n) {\n  updateNotificationsState(store, (notifications) =>\n    notifications.map((item) => {\n      if (item.id === notification.id) {\n        return { ...item, ...notification };\n      }\n\n      return item;\n    })\n  );\n\n  return notification.id;\n}\n\nexport function cleanNotifications(store: NotificationsStore = notificationsStore) {\n  updateNotificationsState(store, () => []);\n}\n\nexport function cleanNotificationsQueue(store: NotificationsStore = notificationsStore) {\n  updateNotificationsState(store, (notifications) =>\n    notifications.slice(0, store.getState().limit)\n  );\n}\n\nexport const notifications = {\n  show: showNotification,\n  hide: hideNotification,\n  update: updateNotification,\n  clean: cleanNotifications,\n  cleanQueue: cleanNotificationsQueue,\n  updateState: updateNotificationsState,\n} as const;\n"],"mappings":";;;;AAAA,IAAIA,SAAS,GAAGC,MAAM,CAACC,cAAc;AACrC,IAAIC,UAAU,GAAGF,MAAM,CAACG,gBAAgB;AACxC,IAAIC,iBAAiB,GAAGJ,MAAM,CAACK,yBAAyB;AACxD,IAAIC,mBAAmB,GAAGN,MAAM,CAACO,qBAAqB;AACtD,IAAIC,YAAY,GAAGR,MAAM,CAACS,SAAS,CAACC,cAAc;AAClD,IAAIC,YAAY,GAAGX,MAAM,CAACS,SAAS,CAACG,oBAAoB;AACxD,IAAIC,eAAe,GAAGA,CAACC,GAAG,EAAEC,GAAG,EAAEC,KAAK,KAAKD,GAAG,IAAID,GAAG,GAAGf,SAAS,CAACe,GAAG,EAAEC,GAAG,EAAE;EAAEE,UAAU,EAAE,IAAI;EAAEC,YAAY,EAAE,IAAI;EAAEC,QAAQ,EAAE,IAAI;EAAEH;AAAK,CAAE,CAAC,GAAGF,GAAG,CAACC,GAAG,CAAC,GAAGC,KAAK;AAC/J,IAAII,cAAc,GAAGA,CAACC,CAAC,EAAEC,CAAC,KAAK;EAC7B,KAAK,IAAIC,IAAI,IAAID,CAAC,KAAKA,CAAC,GAAG,EAAE,CAAC,EAC5B,IAAId,YAAY,CAACgB,IAAI,CAACF,CAAC,EAAEC,IAAI,CAAC,EAC5BV,eAAe,CAACQ,CAAC,EAAEE,IAAI,EAAED,CAAC,CAACC,IAAI,CAAC,CAAC;EACrC,IAAIjB,mBAAmB,EACrB,KAAK,IAAIiB,IAAI,IAAIjB,mBAAmB,CAACgB,CAAC,CAAC,EAAE;IACvC,IAAIX,YAAY,CAACa,IAAI,CAACF,CAAC,EAAEC,IAAI,CAAC,EAC5BV,eAAe,CAACQ,CAAC,EAAEE,IAAI,EAAED,CAAC,CAACC,IAAI,CAAC,CAAC;EACzC;EACE,OAAOF,CAAC;AACV,CAAC;AACD,IAAII,aAAa,GAAGA,CAACJ,CAAC,EAAEC,CAAC,KAAKpB,UAAU,CAACmB,CAAC,EAAEjB,iBAAiB,CAACkB,CAAC,CAAC,CAAC;AAGrD,MAACI,wBAAwB,GAAGA,CAAA,KAAMC,WAAW,CAAC;EACxDC,aAAa,EAAE,EAAE;EACjBC,KAAK,EAAE,EAAE;EACTC,KAAK,EAAE;AACT,CAAC;AACW,MAACC,kBAAkB,GAAGL,wBAAwB;AAC9C,MAACM,gBAAgB,GAAGA,CAACC,KAAK,GAAGF,kBAAkB,KAAKG,QAAQ,CAACD,KAAK;AACvE,SAASE,wBAAwBA,CAACF,KAAK,EAAEG,MAAM,EAAE;EACtD,MAAMC,KAAK,GAAGJ,KAAK,CAACK,QAAQ,EAAE;EAC9B,MAAMC,cAAc,GAAGH,MAAM,CAAC,CAAC,GAAGC,KAAK,CAACT,aAAa,EAAE,GAAGS,KAAK,CAACR,KAAK,CAAC,CAAC;EACvEI,KAAK,CAACO,QAAQ,CAAC;IACbZ,aAAa,EAAEW,cAAc,CAACE,KAAK,CAAC,CAAC,EAAEJ,KAAK,CAACP,KAAK,CAAC;IACnDD,KAAK,EAAEU,cAAc,CAACE,KAAK,CAACJ,KAAK,CAACP,KAAK,CAAC;IACxCA,KAAK,EAAEO,KAAK,CAACP;EACjB,CAAG,CAAC;AACJ;AACO,SAASY,gBAAgBA,CAACC,YAAY,EAAEV,KAAK,GAAGF,kBAAkB,EAAE;EACzE,MAAMa,EAAE,GAAGD,YAAY,CAACC,EAAE,IAAIC,QAAQ,EAAE;EACxCV,wBAAwB,CAACF,KAAK,EAAGM,cAAc,IAAK;IAClD,IAAII,YAAY,CAACC,EAAE,IAAIL,cAAc,CAACO,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACH,EAAE,KAAKD,YAAY,CAACC,EAAE,CAAC,EAAE;MAC3E,OAAOL,cAAc;IAC3B;IACI,OAAO,CAAC,GAAGA,cAAc,EAAEd,aAAa,CAACL,cAAc,CAAC,EAAE,EAAEuB,YAAY,CAAC,EAAE;MAAEC;IAAE,CAAE,CAAC,CAAC;EACvF,CAAG,CAAC;EACF,OAAOA,EAAE;AACX;AACO,SAASI,gBAAgBA,CAACJ,EAAE,EAAEX,KAAK,GAAGF,kBAAkB,EAAE;EAC/DI,wBAAwB,CACtBF,KAAK,EACJM,cAAc,IAAKA,cAAc,CAACU,MAAM,CAAEN,YAAY,IAAK;IAC1D,IAAIO,EAAE;IACN,IAAIP,YAAY,CAACC,EAAE,KAAKA,EAAE,EAAE;MAC1B,CAACM,EAAE,GAAGP,YAAY,CAACQ,OAAO,KAAK,IAAI,GAAG,KAAK,CAAC,GAAGD,EAAE,CAAC1B,IAAI,CAACmB,YAAY,EAAEA,YAAY,CAAC;MAClF,OAAO,KAAK;IACpB;IACM,OAAO,IAAI;EACjB,CAAK,CACL,CAAG;EACD,OAAOC,EAAE;AACX;AACO,SAASQ,kBAAkBA,CAACT,YAAY,EAAEV,KAAK,GAAGF,kBAAkB,EAAE;EAC3EI,wBAAwB,CACtBF,KAAK,EACJM,cAAc,IAAKA,cAAc,CAACc,GAAG,CAAEC,IAAI,IAAK;IAC/C,IAAIA,IAAI,CAACV,EAAE,KAAKD,YAAY,CAACC,EAAE,EAAE;MAC/B,OAAOxB,cAAc,CAACA,cAAc,CAAC,EAAE,EAAEkC,IAAI,CAAC,EAAEX,YAAY,CAAC;IACrE;IACM,OAAOW,IAAI;EACjB,CAAK,CACL,CAAG;EACD,OAAOX,YAAY,CAACC,EAAE;AACxB;AACO,SAASW,kBAAkBA,CAACtB,KAAK,GAAGF,kBAAkB,EAAE;EAC7DI,wBAAwB,CAACF,KAAK,EAAE,MAAM,EAAE,CAAC;AAC3C;AACO,SAASuB,uBAAuBA,CAACvB,KAAK,GAAGF,kBAAkB,EAAE;EAClEI,wBAAwB,CACtBF,KAAK,EACJM,cAAc,IAAKA,cAAc,CAACE,KAAK,CAAC,CAAC,EAAER,KAAK,CAACK,QAAQ,EAAE,CAACR,KAAK,CACtE,CAAG;AACH;AACY,MAACF,aAAa,GAAG;EAC3B6B,IAAI,EAAEf,gBAAgB;EACtBgB,IAAI,EAAEV,gBAAgB;EACtBZ,MAAM,EAAEgB,kBAAkB;EAC1BO,KAAK,EAAEJ,kBAAkB;EACzBK,UAAU,EAAEJ,uBAAuB;EACnCK,WAAW,EAAE1B;AACf"},"metadata":{},"sourceType":"module","externalDependencies":[]}