{"ast":null,"code":"'use client';\n\nimport { useSyncExternalStore } from 'react';\nfunction createStore(initialState) {\n  let state = initialState;\n  let initialized = false;\n  const listeners = /* @__PURE__ */new Set();\n  return {\n    getState() {\n      return state;\n    },\n    updateState(value) {\n      state = typeof value === \"function\" ? value(state) : value;\n    },\n    setState(value) {\n      this.updateState(value);\n      listeners.forEach(listener => listener(state));\n    },\n    initialize(value) {\n      if (!initialized) {\n        state = value;\n        initialized = true;\n      }\n    },\n    subscribe(callback) {\n      listeners.add(callback);\n      return () => listeners.delete(callback);\n    }\n  };\n}\nfunction useStore(store) {\n  return useSyncExternalStore(store.subscribe, () => store.getState(), () => store.getState());\n}\nexport { createStore, useStore };","map":{"version":3,"names":["createStore","initialState","state","initialized","listeners","Set","getState","updateState","value","setState","forEach","listener","initialize","subscribe","callback","add","delete","useStore","store","useSyncExternalStore"],"sources":["/Users/arslan/dev/carter-character/carter-character/node_modules/@mantine/store/src/store.ts"],"sourcesContent":["import { useSyncExternalStore } from 'react';\n\nexport type MantineStoreSubscriber<Value> = (value: Value) => void;\ntype SetStateCallback<Value> = (value: Value) => Value;\n\nexport interface MantineStore<Value> {\n  getState(): Value;\n  setState(value: Value | SetStateCallback<Value>): void;\n  updateState(value: Value | SetStateCallback<Value>): void;\n  initialize(value: Value): void;\n  subscribe(callback: MantineStoreSubscriber<Value>): () => void;\n}\n\nexport type MantineStoreValue<Store extends MantineStore<any>> = ReturnType<Store['getState']>;\n\nexport function createStore<Value extends Record<string, any>>(\n  initialState: Value\n): MantineStore<Value> {\n  let state = initialState;\n  let initialized = false;\n  const listeners = new Set<MantineStoreSubscriber<Value>>();\n\n  return {\n    getState() {\n      return state;\n    },\n\n    updateState(value) {\n      state = typeof value === 'function' ? value(state) : value;\n    },\n\n    setState(value) {\n      this.updateState(value);\n      listeners.forEach((listener) => listener(state));\n    },\n\n    initialize(value) {\n      if (!initialized) {\n        state = value;\n        initialized = true;\n      }\n    },\n\n    subscribe(callback) {\n      listeners.add(callback);\n      return () => listeners.delete(callback);\n    },\n  };\n}\n\nexport function useStore<Store extends MantineStore<any>>(store: Store) {\n  return useSyncExternalStore<MantineStoreValue<Store>>(\n    store.subscribe,\n    () => store.getState(),\n    () => store.getState()\n  );\n}\n"],"mappings":";;;AACO,SAASA,WAAWA,CAACC,YAAY,EAAE;EACxC,IAAIC,KAAK,GAAGD,YAAY;EACxB,IAAIE,WAAW,GAAG,KAAK;EACvB,MAAMC,SAAS,kBAAmB,IAAIC,GAAG,EAAE;EAC3C,OAAO;IACLC,QAAQA,CAAA,EAAG;MACT,OAAOJ,KAAK;IAClB,CAAK;IACDK,WAAWA,CAACC,KAAK,EAAE;MACjBN,KAAK,GAAG,OAAOM,KAAK,KAAK,UAAU,GAAGA,KAAK,CAACN,KAAK,CAAC,GAAGM,KAAK;IAChE,CAAK;IACDC,QAAQA,CAACD,KAAK,EAAE;MACd,IAAI,CAACD,WAAW,CAACC,KAAK,CAAC;MACvBJ,SAAS,CAACM,OAAO,CAAEC,QAAQ,IAAKA,QAAQ,CAACT,KAAK,CAAC,CAAC;IACtD,CAAK;IACDU,UAAUA,CAACJ,KAAK,EAAE;MAChB,IAAI,CAACL,WAAW,EAAE;QAChBD,KAAK,GAAGM,KAAK;QACbL,WAAW,GAAG,IAAI;MAC1B;IACA,CAAK;IACDU,SAASA,CAACC,QAAQ,EAAE;MAClBV,SAAS,CAACW,GAAG,CAACD,QAAQ,CAAC;MACvB,OAAO,MAAMV,SAAS,CAACY,MAAM,CAACF,QAAQ,CAAC;IAC7C;EACA,CAAG;AACH;AACO,SAASG,QAAQA,CAACC,KAAK,EAAE;EAC9B,OAAOC,oBAAoB,CACzBD,KAAK,CAACL,SAAS,EACf,MAAMK,KAAK,CAACZ,QAAQ,EAAE,EACtB,MAAMY,KAAK,CAACZ,QAAQ,EACxB,CAAG;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}